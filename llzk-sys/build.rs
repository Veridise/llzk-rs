//! llzk-sys's build script.
//!
//! Performs the following sequence of steps:
//! - Build and link the vendored version of `llzk-lib`
//! - Generate the Rust bindings for LLZK's CAPI using [`bindgen`].
//! - Build and link the static functions defined in LLZK's CAPI.

use anyhow::Result;
use build_support::{
    apply_bindgen_cfg, apply_cc_cfg, build_llzk, default::DefaultConfig,
    wrap_static_fns::WrapStaticFns,
};
use std::{env, path::Path};

#[path = "src/build_support/mod.rs"]
mod build_support;

/// Default configuration of the build process.
///
/// Exported names on LLZK's CAPI are usually prefixed with `Llzk` or `llzk`. However, some names
/// in the CAPI are prefixed with `Mlir` or `mlir`. These include:
///
/// - LLZK's passes since its CAPI is generated with tablegen and that's the prefix used by the
/// tool.
/// - LLZK's functions for dialect handles and pass registration. These are also generated by
/// tablegen.
/// - Helper types whose corresponding C++ type is a MLIR type.
const DEFAULT_CFG: DefaultConfig<'static> = DefaultConfig::new(
    &[
        "ArrayToScalar",
        "InlineIncludes",
        "Flattening",
        "RedundantOperationElimination",
        "RedundantReadAndWriteElimination",
        "UnusedDeclarationElimination",
        "FieldWriteValidator",
    ],
    &[
        "GetDialectHandle__llzk__.*",
        "DestroyOpBuilder.*",
        "CreateOpBuilder.*",
        "OpBuilder.*",
        "RegisterLLZK.*Passes",
    ],
    &[
        "OpBuilder",
        "OpBuilderListener",
        "Notify(Operation|Block)Inserted",
        "(Op|Block)InsertionPoint",
        "ValueRange",
    ],
);

fn main() -> Result<()> {
    let llzk = build_llzk(&DEFAULT_CFG)?;
    let static_fns = WrapStaticFns::new()?;
    apply_bindgen_cfg(bindgen::builder(), &[&DEFAULT_CFG, &llzk, &static_fns])?
        .generate()?
        .write_to_file(Path::new(&env::var("OUT_DIR")?).join("bindings.rs"))?;

    let mut cc = cc::Build::new();
    apply_cc_cfg(&mut cc, &[&DEFAULT_CFG, &llzk, &static_fns])?;
    cc.compile("llzk-sys-cc");
    Ok(())
}
