//! Configuration for creating a link to compile commands databases.

use super::{config_traits::cmake::CMakeConfig, llzk::LlzkBuild};
use anyhow::bail;
use anyhow::Result;
use cmake::Config;
use std::borrow::Cow;
use std::fs;
#[cfg(not(target_os = "windows"))]
use std::os::unix::fs::symlink;
#[cfg(target_os = "windows")]
use std::os::windows::fs::symlink_file as symlink;
use std::path::Path;

/// CMake configuration that, if requested, will configure CMake to emit a compile commands
/// database.
#[derive(Debug, Clone, Copy)]
pub struct CompileCommands {
    dst: &'static Path,
}

impl CompileCommands {
    /// Returns an instance of [`CompileCommands`] if the `LLZK_EMIT_COMPILE_COMMANDS` environment
    /// flag is enabled.
    ///
    /// Returns [`None`] if the variable is not present.
    pub fn get() -> Option<Self> {
        if let Some(s) = option_env!("LLZK_EMIT_COMPILE_COMMANDS") {
            let dst = Path::new(s);
            if !dst.exists() {
                return None;
            }
            return Some(CompileCommands { dst });
        }
        None
    }

    /// Returns the path where the link to `compile_commands.json` will be created.
    pub fn dst(&self) -> Cow<'static, Path> {
        if self.dst.is_dir() {
            return Cow::Owned(self.dst.join("compile_commands.json"));
        }
        Cow::Borrowed(self.dst)
    }

    /// Links the generated `compile_commands.json` file generated by CMake to the destination path
    /// set by the `LLZK_EMIT_COMPILE_COMMANDS` environment variable.
    pub fn link(&self, llzk: &LlzkBuild) -> Result<()> {
        let src = llzk.build_path().join("compile_commands.json");
        if !src.is_file() {
            bail!(
                "Compile commands requested but it was not found or is not a file: {}",
                src.display()
            );
        }
        let dst = self.dst();
        if dst.is_symlink() || dst.exists() {
            fs::remove_file(&dst)?;
        }
        symlink(src, dst)?;

        Ok(())
    }
}

impl CMakeConfig for CompileCommands {
    fn apply(&self, cmake: &mut Config) -> Result<()> {
        cmake.define("CMAKE_EXPORT_COMPILE_COMMANDS", "1");
        Ok(())
    }
}
